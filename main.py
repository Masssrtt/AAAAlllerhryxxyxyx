from datetime import datetime, timedelta

chat_contexts_timestamps = {}

import asyncio
import platform
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import g4f
import html

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü–∏–∫–ª—ñ–≤ –¥–ª—è Windows
if platform.system() == "Windows":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –í–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞
BOT_TOKEN = "7644679484:AAGlOjZjtTMNDFeoe79B8QKWf3oBksbFr6o"

bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–∞—Ç—É
chat_contexts = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text="üõë –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"))
    return keyboard

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è –¥–æ–≤–≥–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def split_long_message(message, chunk_size=4096):
    return [message[i:i + chunk_size] for i in range(0, len(message), chunk_size)]

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def cmd_start(message):
    chat_id = message.chat.id
    bot.send_message(
        chat_id,
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ GPT-4 ü§ñ.\n\n"
        "–°—Ç–∞–≤—Ç–µ –±—É–¥—å-—è–∫—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äì —è –∑–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏! üß†\n\n"
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞—é –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, –Ω–∞—É–∫—É, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ! ‚úçÔ∏è\n\n"
        "–Ü–Ω–æ–¥—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 5 —Ö–≤–∏–ª–∏–Ω, –∞–ª–µ —è –∑—Ä–æ–±–ª—é –≤—Å–µ, —â–æ–± –≤–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ! üòä\n\n"
        "–†–æ–∑–ø–æ—á–Ω–µ–º–æ? üöÄ",
        reply_markup=get_main_keyboard()
    )

    chat_contexts[chat_id] = [{
        "role": "system",
        "content": """
–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–≤–∏—á–∞–π–Ω—ñ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –∑–Ω–∞–∫–∏ –∑–∞–º—ñ—Å—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ *, /, ^, ‚â§, ‚â•, ‚â†, Œ£, Œ†, ‚àö —Ç–∞ —ñ–Ω—à—ñ —Å–∏–º–≤–æ–ª–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ."""
    }]

MAX_HISTORY_LENGTH = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ

if len(chat_contexts[chat_id]) > MAX_HISTORY_LENGTH:
    chat_contexts[chat_id] = chat_contexts[chat_id][-MAX_HISTORY_LENGTH:]

relevant_context = "\n".join([item["content"] for item in chat_contexts[chat_id] if item["role"] != "system"])
prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–ø–∏—Ç–∞–≤: {user_input}.\n–Ü—Å—Ç–æ—Ä—ñ—è –±–µ—Å—ñ–¥–∏:\n{relevant_context}"



# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É"
@bot.message_handler(func=lambda msg: msg.text == "üõë –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
def end_chat(message):
    chat_id = message.chat.id
    if chat_id in chat_contexts:
        chat_contexts.pop(chat_id)
    bot.send_message(chat_id, """
–†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.
–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Ä–æ–∑–º–æ–≤—É, –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—Ç–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. üòâ
    """)

# –û–±—Ä–æ–±–Ω–∏–∫ –±—É–¥—å-—è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    chat_id = message.chat.id
    user_input = message.text.strip()

    if chat_id not in chat_contexts:
        chat_contexts[chat_id] = [{
            "role": "system",
            "content": """
–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á—ñ—Ç–∫–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ."""
        }]

    bot.send_chat_action(chat_id, "typing")

    prompt = f"""–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç–∞–≤: {user_input}.
–î–∞–π—Ç–µ —á—ñ—Ç–∫—É —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
    prompt += "\n–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏:\n" + "\n".join([item["content"] for item in chat_contexts[chat_id]])

    try:
        response = g4f.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
        )

        if isinstance(response, dict) and 'choices' in response:
            assistant_message = response['choices'][0]['message']['content']
        else:
            assistant_message = str(response)

    except Exception as e:
        assistant_message = f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {str(e)}"

    chat_contexts[chat_id].append({"role": "assistant", "content": assistant_message})

    decoded_response = html.unescape(assistant_message)
    split_messages = split_long_message(decoded_response)

    for msg in split_messages:
        bot.send_message(chat_id, msg)
        chat_contexts_timestamps[chat_id] = datetime.now()
def cleanup_contexts():
    now = datetime.now()
    for chat_id, timestamp in list(chat_contexts_timestamps.items()):
        if now - timestamp > timedelta(hours=1):  # –ö–æ–Ω—Ç–µ–∫—Å—Ç–∏ —Å—Ç–∞—Ä—à–µ –≥–æ–¥–∏–Ω–∏
            chat_contexts.pop(chat_id, None)
            chat_contexts_timestamps.pop(chat_id, None)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.infinity_polling()
